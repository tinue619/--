// ========== –ò–°–¢–û–†–ò–Ø: –û–¢–õ–ê–î–ö–ê ==========

/**
 * –û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export function debugHistory(app) {
  console.group('üìö –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
  console.log(`–í—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: ${app.history.states.length}`);
  console.log(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${app.history.index}`);
  console.log('\n');
  
  app.history.states.forEach((state, index) => {
    const isCurrent = index === app.history.index;
    console.group(`${isCurrent ? 'üëâ' : '  '} –°–æ—Å—Ç–æ—è–Ω–∏–µ #${index}`);
    
    // –†–∞–∑–º–µ—Ä—ã —à–∫–∞—Ñ–∞
    if (state.cabinet) {
      console.log('üóÑÔ∏è –®–∫–∞—Ñ:', {
        —à–∏—Ä–∏–Ω–∞: state.cabinet.width,
        –≤—ã—Å–æ—Ç–∞: state.cabinet.height,
        –≥–ª—É–±–∏–Ω–∞: state.cabinet.depth
      });
    }
    
    // –ü–∞–Ω–µ–ª–∏
    console.log(`üì¶ –ü–∞–Ω–µ–ª–µ–π: ${state.panels.length}`);
    state.panels.forEach(panel => {
      const type = panel.type === 'shelf' ? 'üìè' : 'üìê';
      const pos = panel.type === 'shelf' ? `y:${panel.position.y}` : `x:${panel.position.x}`;
      const bounds = panel.type === 'shelf' 
        ? `[${panel.bounds.startX} - ${panel.bounds.endX}] = ${panel.bounds.endX - panel.bounds.startX}–º–º`
        : `[${panel.bounds.startY} - ${panel.bounds.endY}] = ${panel.bounds.endY - panel.bounds.startY}–º–º`;
      
      console.log(`  ${type} ${panel.id}: ${pos}, bounds: ${bounds}`);
    });
    
    console.groupEnd();
  });
  
  console.groupEnd();
}

/**
 * –û—Ç–ª–∞–¥–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export function debugCurrentState(app) {
  console.group('üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
  
  console.log('üóÑÔ∏è –®–∫–∞—Ñ:', {
    —à–∏—Ä–∏–Ω–∞: app.cabinet.width,
    –≤—ã—Å–æ—Ç–∞: app.cabinet.height,
    –≥–ª—É–±–∏–Ω–∞: app.cabinet.depth
  });
  
  console.log('\nüì¶ –ü–∞–Ω–µ–ª–∏:');
  for (let panel of app.panels.values()) {
    const type = panel.type === 'shelf' ? 'üìè –ü–æ–ª–∫–∞' : 'üìê –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å';
    console.group(`${type}: ${panel.id}`);
    console.log('–ü–æ–∑–∏—Ü–∏—è:', panel.position);
    console.log('–ì—Ä–∞–Ω–∏—Ü—ã:', panel.bounds);
    console.log('–†–∞–∑–º–µ—Ä:', panel.size, '–º–º');
    console.log('–°–≤—è–∑–∏:', {
      left: panel.connections.left?.id || null,
      right: panel.connections.right?.id || null,
      top: panel.connections.top?.id || null,
      bottom: panel.connections.bottom?.id || null
    });
    if (panel.ribs && panel.ribs.length > 0) {
      console.log('–†–µ–±—Ä–∞:', panel.ribs.map(r => `[${r.startX}-${r.endX}]=${r.endX-r.startX}–º–º`));
    }
    console.groupEnd();
  }
  
  console.groupEnd();
}

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏—Å—Ç–æ—Ä–∏–∏
 */
export function compareStates(app, index1, index2) {
  if (index1 < 0 || index1 >= app.history.states.length ||
      index2 < 0 || index2 >= app.history.states.length) {
    console.error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π');
    return;
  }
  
  const state1 = app.history.states[index1];
  const state2 = app.history.states[index2];
  
  console.group(`üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π #${index1} –∏ #${index2}`);
  
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —à–∫–∞—Ñ–∞
  if (state1.cabinet && state2.cabinet) {
    const widthChanged = state1.cabinet.width !== state2.cabinet.width;
    const heightChanged = state1.cabinet.height !== state2.cabinet.height;
    
    if (widthChanged || heightChanged) {
      console.log('üóÑÔ∏è –†–∞–∑–º–µ—Ä—ã —à–∫–∞—Ñ–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:');
      if (widthChanged) {
        console.log(`  –®–∏—Ä–∏–Ω–∞: ${state1.cabinet.width} ‚Üí ${state2.cabinet.width} (${state2.cabinet.width - state1.cabinet.width > 0 ? '+' : ''}${state2.cabinet.width - state1.cabinet.width}–º–º)`);
      }
      if (heightChanged) {
        console.log(`  –í—ã—Å–æ—Ç–∞: ${state1.cabinet.height} ‚Üí ${state2.cabinet.height}`);
      }
    } else {
      console.log('üóÑÔ∏è –†–∞–∑–º–µ—Ä—ã —à–∫–∞—Ñ–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å');
    }
  }
  
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª–∏
  const panels1Map = new Map(state1.panels.map(p => [p.id, p]));
  const panels2Map = new Map(state2.panels.map(p => [p.id, p]));
  
  // –ù–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏
  const added = state2.panels.filter(p => !panels1Map.has(p.id));
  if (added.length > 0) {
    console.log('\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–∞–Ω–µ–ª–µ–π:', added.length);
    added.forEach(p => console.log(`  - ${p.id}`));
  }
  
  // –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
  const removed = state1.panels.filter(p => !panels2Map.has(p.id));
  if (removed.length > 0) {
    console.log('\n‚ûñ –£–¥–∞–ª–µ–Ω–æ –ø–∞–Ω–µ–ª–µ–π:', removed.length);
    removed.forEach(p => console.log(`  - ${p.id}`));
  }
  
  // –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
  const changed = [];
  for (let [id, panel1] of panels1Map) {
    const panel2 = panels2Map.get(id);
    if (!panel2) continue;
    
    const posChanged = JSON.stringify(panel1.position) !== JSON.stringify(panel2.position);
    const boundsChanged = JSON.stringify(panel1.bounds) !== JSON.stringify(panel2.bounds);
    
    if (posChanged || boundsChanged) {
      changed.push({ id, panel1, panel2, posChanged, boundsChanged });
    }
  }
  
  if (changed.length > 0) {
    console.log('\nüìù –ò–∑–º–µ–Ω–µ–Ω–æ –ø–∞–Ω–µ–ª–µ–π:', changed.length);
    changed.forEach(({ id, panel1, panel2, posChanged, boundsChanged }) => {
      console.group(`  ${id}`);
      if (posChanged) {
        console.log('–ü–æ–∑–∏—Ü–∏—è:', panel1.position, '‚Üí', panel2.position);
      }
      if (boundsChanged) {
        const size1 = panel1.type === 'shelf' 
          ? panel1.bounds.endX - panel1.bounds.startX
          : panel1.bounds.endY - panel1.bounds.startY;
        const size2 = panel2.type === 'shelf'
          ? panel2.bounds.endX - panel2.bounds.startX
          : panel2.bounds.endY - panel2.bounds.startY;
        console.log('–ì—Ä–∞–Ω–∏—Ü—ã:', panel1.bounds, '‚Üí', panel2.bounds);
        console.log(`–†–∞–∑–º–µ—Ä: ${size1}–º–º ‚Üí ${size2}–º–º (${size2 - size1 > 0 ? '+' : ''}${size2 - size1}–º–º)`);
      }
      console.groupEnd();
    });
  }
  
  if (added.length === 0 && removed.length === 0 && changed.length === 0) {
    console.log('\n‚úÖ –ü–∞–Ω–µ–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å');
  }
  
  console.groupEnd();
}
