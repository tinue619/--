// ========== –ò–°–¢–û–†–ò–Ø: –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò UI ==========

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏
 */
export function setupHistoryDrag() {
  const historyPanel = document.getElementById('history-panel');
  const historyHeader = document.getElementById('history-header');
  if (!historyPanel || !historyHeader) return;
  
  let isDragging = false;
  let currentX, currentY, initialX, initialY;
  
  const dragStart = (e) => {
    // –ù–µ –¥—Ä–∞–≥–∞—Ç—å –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
    if (e.target.closest('button')) return;
    
    // –¢–æ–ª—å–∫–æ –Ω–∞ desktop
    if (window.innerWidth <= 1024) return;
    
    isDragging = true;
    
    const rect = historyPanel.getBoundingClientRect();
    initialX = rect.left;
    initialY = rect.top;
    currentX = e.clientX;
    currentY = e.clientY;
    
    historyPanel.style.transition = 'none';
  };
  
  const drag = (e) => {
    if (!isDragging) return;
    e.preventDefault();
    
    const dx = e.clientX - currentX;
    const dy = e.clientY - currentY;
    
    const newX = initialX + dx;
    const newY = initialY + dy;
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —ç–∫—Ä–∞–Ω—É
    const maxX = window.innerWidth - historyPanel.offsetWidth;
    const maxY = window.innerHeight - historyPanel.offsetHeight;
    
    const boundedX = Math.max(0, Math.min(newX, maxX));
    const boundedY = Math.max(0, Math.min(newY, maxY));
    
    historyPanel.style.left = boundedX + 'px';
    historyPanel.style.top = boundedY + 'px';
    historyPanel.style.right = 'auto';
    historyPanel.style.bottom = 'auto';
  };
  
  const dragEnd = () => {
    isDragging = false;
    historyPanel.style.transition = '';
  };
  
  historyHeader.addEventListener('mousedown', dragStart);
  document.addEventListener('mousemove', drag);
  document.addEventListener('mouseup', dragEnd);
}

/**
 * –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏
 */
export function toggleHistoryCollapse() {
  const historyPanel = document.getElementById('history-panel');
  const collapseBtn = document.getElementById('collapse-history-btn');
  if (!historyPanel || !collapseBtn) return;
  
  historyPanel.classList.toggle('collapsed');
  collapseBtn.textContent = historyPanel.classList.contains('collapsed') ? '‚ñ≤' : '‚ñº';
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 */
export function copyHistoryLogs(app) {
  const historyContent = document.getElementById('history-content');
  if (!historyContent) return;
  
  const entries = historyContent.querySelectorAll('.history-entry');
  if (entries.length === 0) {
    app.updateStatus('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞');
    return;
  }
  
  let logText = '–ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô CABINET EDITOR\n';
  logText += '='.repeat(50) + '\n\n';
  
  entries.forEach((entry, index) => {
    const time = entry.querySelector('.history-time')?.textContent || '';
    const action = entry.querySelector('.history-action')?.textContent || '';
    const details = entry.querySelector('.history-details');
    
    logText += `${time} ${action}\n`;
    
    if (details) {
      const changes = details.querySelectorAll('.history-change');
      changes.forEach(change => {
        // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        const text = change.textContent
          .replace(/\s+/g, ' ')
          .trim();
        logText += `  ‚Ä¢ ${text}\n`;
      });
    }
    
    logText += '\n';
  });
  
  logText += '='.repeat(50) + '\n';
  logText += `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${entries.length}\n`;
  logText += `–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}\n`;
  
  // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  navigator.clipboard.writeText(logText).then(() => {
    app.updateStatus('‚úÖ –õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
  }).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    app.updateStatus('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
  });
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –∏—Å—Ç–æ—Ä–∏–∏
 */
export function logToHistory(action, details) {
  const historyContent = document.getElementById('history-content');
  if (!historyContent) return;
  
  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
  const emptyMsg = historyContent.querySelector('.history-empty');
  if (emptyMsg) emptyMsg.remove();
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
  const entry = document.createElement('div');
  entry.className = `history-entry ${action}`;
  
  const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
  
  let actionText = '';
  let actionIcon = '';
  
  switch(action) {
    case 'save':
      actionIcon = 'üíæ';
      actionText = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
      break;
    case 'undo':
      actionIcon = '‚èÆÔ∏è';
      actionText = '–û—Ç–º–µ–Ω–µ–Ω–æ';
      break;
    case 'redo':
      actionIcon = '‚è≠Ô∏è';
      actionText = '–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ';
      break;
  }
  
  let html = `
    <span class="history-time">[${time}]</span>
    <span class="history-action">${actionIcon} ${actionText}</span>
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  if (details && details.length > 0) {
    html += '<div class="history-details">';
    details.forEach(detail => {
      html += `<div class="history-change">${detail}</div>`;
    });
    html += '</div>';
  }
  
  entry.innerHTML = html;
  historyContent.insertBefore(entry, historyContent.firstChild);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
  const allEntries = historyContent.querySelectorAll('.history-entry');
  if (allEntries.length > 50) {
    allEntries[allEntries.length - 1].remove();
  }
  
  // –ê–≤—Ç–æ-—Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –∫ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  historyContent.scrollTop = 0;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏
 */
export function clearHistoryLog() {
  const historyContent = document.getElementById('history-content');
  if (!historyContent) return;
  
  historyContent.innerHTML = '<div class="history-empty">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>';
}

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function compareStatesForLog(oldState, newState) {
  const changes = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —à–∫–∞—Ñ–∞
  if (oldState && newState) {
    if (oldState.cabinet && newState.cabinet) {
      const oldWidth = oldState.cabinet.width;
      const newWidth = newState.cabinet.width;
      
      if (Math.abs(oldWidth - newWidth) > 0.1) {
        const diff = newWidth - oldWidth;
        const diffClass = diff > 0 ? '' : 'negative';
        const diffText = diff > 0 ? `+${Math.round(diff)}` : Math.round(diff);
        
        changes.push(`
          <span>–®–∏—Ä–∏–Ω–∞ —à–∫–∞—Ñ–∞:</span>
          <span class="history-change-value">${Math.round(oldWidth)}–º–º</span>
          <span class="history-change-arrow">‚Üí</span>
          <span class="history-change-value">${Math.round(newWidth)}–º–º</span>
          <span class="history-change-diff ${diffClass}">(${diffText}–º–º)</span>
        `);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
    const oldPanels = new Map(oldState.panels.map(p => [p.id, p]));
    const newPanels = new Map(newState.panels.map(p => [p.id, p]));
    
    // –ù–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏
    const added = newState.panels.filter(p => !oldPanels.has(p.id));
    if (added.length > 0) {
      added.forEach(p => {
        const icon = p.type === 'shelf' ? 'üìè' : 'üìê';
        const typeName = p.type === 'shelf' ? '–ü–æ–ª–∫–∞' : '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å';
        changes.push(`<span>${icon} –î–æ–±–∞–≤–ª–µ–Ω: ${typeName}</span>`);
      });
    }
    
    // –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
    const removed = oldState.panels.filter(p => !newPanels.has(p.id));
    if (removed.length > 0) {
      removed.forEach(p => {
        const icon = p.type === 'shelf' ? 'üìè' : 'üìê';
        const typeName = p.type === 'shelf' ? '–ü–æ–ª–∫–∞' : '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å';
        changes.push(`<span>${icon} –£–¥–∞–ª–µ–Ω: ${typeName}</span>`);
      });
    }
    
    // –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–µ–π
    for (let [id, oldPanel] of oldPanels) {
      const newPanel = newPanels.get(id);
      if (!newPanel) continue;
      
      const oldSize = oldPanel.type === 'shelf' 
        ? oldPanel.bounds.endX - oldPanel.bounds.startX
        : oldPanel.bounds.endY - oldPanel.bounds.startY;
      const newSize = newPanel.type === 'shelf'
        ? newPanel.bounds.endX - newPanel.bounds.startX
        : newPanel.bounds.endY - newPanel.bounds.startY;
      
      if (Math.abs(oldSize - newSize) > 0.1) {
        const icon = oldPanel.type === 'shelf' ? 'üìè' : 'üìê';
        const diff = newSize - oldSize;
        const diffClass = diff > 0 ? '' : 'negative';
        const diffText = diff > 0 ? `+${Math.round(diff)}` : Math.round(diff);
        
        changes.push(`
          <span>${icon} ${id}:</span>
          <span class="history-change-value">${Math.round(oldSize)}–º–º</span>
          <span class="history-change-arrow">‚Üí</span>
          <span class="history-change-value">${Math.round(newSize)}–º–º</span>
          <span class="history-change-diff ${diffClass}">(${diffText}–º–º)</span>
        `);
      }
    }
  }
  
  return changes;
}
